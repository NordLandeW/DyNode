name: Build GameMaker Project

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "CREDITS"
  pull_request:
    branches: ["main"]
  workflow_dispatch: # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      # Prepare repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true # Enable Git LFS for large files

      # Build DyCore C++ subproject
      - name: Setup MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: Find mt.exe
        id: find_mt
        run: |
          $mtPath = (where.exe mt.exe | Select-Object -First 1)
          Write-Output "Found mt.exe at: $mtPath"
          "mt-path=$mtPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Configure DyCore using CMake
        working-directory: ./DyCore
        run: cmake --preset=x64-release .

      - name: Build and Install DyCore
        working-directory: ./DyCore
        run: cmake --build out/build/x64-release --config Release

      # Build GameMaker project
      - id: find_yyp
        name: Find the .yyp file
        run: |
          $yyp = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter *.yyp
          Write-Output "YYP file found at: $yyp"
          "yyp-path=$yyp" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Setup Igor
        uses: bscotch/igor-setup@v3
        id: igor
        with:
          target-yyp: ${{ steps.find_yyp.outputs.yyp-path }}
          access-key: ${{ secrets.ACCESS_KEY }}

      - name: Build with Igor
        uses: bscotch/igor-build@v1
        id: build
        with:
          yyp-path: ${{ steps.find_yyp.outputs.yyp-path }}
          user-dir: ${{ steps.igor.outputs.user-dir }}
          yyc: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Run Post-Build Script
        id: post_build
        run: |
          # Find the .zip file produced by the build step
          $zipFileObject = Get-ChildItem -Path "${{ steps.build.outputs.out-dir }}" -Filter *.zip | Select-Object -First 1
          if (-not $zipFileObject) {
            Write-Error "Error: No .zip file found in the build output directory."
            exit 1
          }
          $zipPath = $zipFileObject.FullName
          Write-Output "Processing artifact: $zipPath"

          # Execute the python script with all required paths as arguments
          python postbuild/main.py `
            --mt-path "${{ steps.find_mt.outputs.mt-path }}" `
            --zip-path "$zipPath" `
            --manifest-path "postbuild/manifest.xml" `
            --target-exe "DyNode.exe"

          # Output the path of the modified zip file for the upload step
          "modified-zip-path=$zipPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ${{ steps.post_build.outputs.modified-zip-path }}
